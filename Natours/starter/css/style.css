/* Three pillars to write good html and css
- responsive design -> fluid layouts, media queries, responsive images, correct units, desktop-first vs mobile-first
- maintainable and scalable code -> clean, easy-to-understand, growth, reusable, how to organize files, how to name classes, how to structure html
- web performance -> less http requests, less code, compress code, use a css preprocessor, less images, compress images
*/
/*
PRIORITY IN CSS

IMPORTANCE > SPECIFICITY > SOURCE ORDER

IMPORTANCE
1.User(CSS changes from browser) !important declarations
2.Author(from CSS files) !important declarations
3.Author declarations
4.User declarations
5.Default browser declarations

SPECIFICITY
1.Inline styles
2.IDs
3.Classes, pseudo-classes, attribute
4.Elements, pseudo-elements

SOURCE ORDER
The last declaration in the code will override all other declarations and be applied.

!important should be used as a last resort.
* (universal selector) has no specificity (0, 0, 0, 0).
*/
/*
Units
percentage(%) [fonts] -> x% * parent's computed font-size
percentage(%) [lengths] ->  -> x% * parent's computed width
em(fonts) -> x * parent computed font-size
em(lengths) -> x * current element computed font-size
rem(fonts/lengths) -> x * root computecd font-size
vh -> x * 1% of viewport height
vw -> x * 1% of viewport width

Each property has an initial values, used if nothing is declared(and if there is no inherintace).
*/
/*
line-height is inherited, the computed value is the one that is being inherited, so if we have a relative value or a percentage, the value will be first computed in the parent element
and then inherited by the child element.
Property related to text are inherited: font-familiy, font-size, color, etc;(you cand search which on the internet).
The inherit keyword forces inherintance on a certain property.
The initial keyword resets a property to its initial value.
*/
/*
The think - build - architect mindset
Think about the layout of your webpage or web app before writing code.
Build you layout in HTML and CSS with a consistent structure for naming classes.
Create a logical architecture for your CSS with files and folders.

Think
Component-driven design:
- modular building blocks that make up interfaces;
- held together by the layout of the page;
- re-usable across a project, and between different projects;
- independent allowing us to use them anywhere on the page.

Build
BEM - Block Element Modifier
Ex: .block, .block__element, .block__element--modifier
Block: standalone component that is meaningful on its own.
Element: part of a block that has no standalone meaning.
Modifier: a different version of a block or an element(similar to a flag).

Architect
7-1 Pattern
7 different folder for partial Sass files ,and 1 main Sass file to import
all other files into a compiled css stylesheet.
The 7 folders:
- base;
- components;
- layout;
- pages;
- themes;
- abstracts;
- vendors.
*/
/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485
*/
/* Universal selector used for global reset  */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /* used for inherinting box-sizing from body elements to child elements */ }

/* Root element */
html {
  /* font-size: 10px; bad practice */
  /* font-size: 100%; usually this will result in 16px */
  font-size: 62.5%;
  /*usually this will result in 10px*/ }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem;
  /* cannot be inherited */
  box-sizing: border-box; }

/* Header component */
.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/hero.jpg");
  background-size: cover;
  background-position: top;
  position: relative;
  /* needed for absolut positioning for logo */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__text-box {
    /* center text-box*/
    position: absolute;
    top: 40%;
    /* this is related to the parent*/
    left: 50%;
    transform: translate(-50%, -50%);
    /* this is related to the element itself*/
    text-align: center;
    /* the button will be centered */ }
  .header__logo {
    height: 3.5rem; }

/* .logo:hover {
  animation: moveInRight 1s ease-out;
} */
.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /* otherwise during animation there will be a shaking effect */
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* animation-iteration-count: 3; */
    /* animation-delay: 3s; */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    /* animation-name: moveInRight;
    animation-duration: 1s;
    animation-timing-function: ease-out; */
    animation: moveInRight 1s ease-out; }

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  /* 60% {
    transform: rotate(180deg);
  } */
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

.btn:link, .btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  border-radius: 10rem;
  transition: all 0.2s;
  position: relative;
  /* needed to absolute positioning for after */
  font-size: 1.6rem; }

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
  .btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0; }

.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn::after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s; }

.btn--white {
  background-color: #fff;
  color: #777; }
  .btn--white::after {
    background-color: #fff; }

.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  animation-fill-mode: backwards;
  /* otherwise the button will be visible before the animation happens*/ }

/*
<nav>
  <ul class="navigation">
    <li><a href="#">About us</a></li>
    <li><a href="#">Pricing</a></li>
    <li><a href="#">Contact</a></li>
  </ul>
  <div class="buttons">
    <a href="#" class="btn-main">Sign up</a>
    <a href="#" class="btn-hot">Get quote</a>
  </div>
</nav>

* {
  margin: 0;
  padding: 0;
}

$color-primary: #f9ed69; // yellow color
$color-secondary: #f08a5d; // orange color
$color-tertiary: #b83b53; // pink color
$color-text-dark: #333; // grey color
$color-text-light: #eee; // light color

$width-button: 150px;

@mixin clearfix {
  &::after {
    //clearfix
    content: "";
    clear: both;
    display: table;
  }
}

@mixin style-link-text($color) {
  text-decoration: none;
  text-transform: uppercase;
  color: $color;
}

@function divide($a, $b) {
  @return $a / $b;
}

nav {
  margin: divide(60, 2) * 1px; // 30px
  background-color: $color-primary;

  @include clearfix;
}

.navigation {
  list-style: none;
  float: left;

  li {
    display: inline-block;
    margin-left: 30px;

    &:first-child {
      margin: 0;
    }

    a:link {
      @include style-link-text($color-text-dark);
    }
  }
}

.buttons {
  float: right;
}

%btn-placeholder {
  padding: 10px;
  display: inline-block;
  text-align: center;
  border-radius: 100px;
  width: $width-button;
  @include style-link-text($color-text-light);
}

.btn-main {
  &:link {
    @extend %btn-placeholder;
    background-color: $color-secondary;
  }

  &:hover {
    background-color: darken($color-secondary, 15%);
  }
}

.btn-hot {
  &:link {
    @extend %btn-placeholder;
    background-color: $color-tertiary;
  }

  &:hover {
    background-color: lighten($color-tertiary, 10%);
  }
}

 */
