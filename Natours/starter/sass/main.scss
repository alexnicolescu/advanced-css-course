@import "abstracts/functions";
@import "abstracts/mixins";
@import "abstracts/variables";

@import "base/base";
@import "base/animations";
@import "base/typography";
@import "base/utilities";

@import "components/button";

@import "layout/grid";
@import "layout/header";

@import "pages/home";

/* Three pillars to write good html and css
- responsive design -> fluid layouts, media queries, responsive images, correct units, desktop-first vs mobile-first
- maintainable and scalable code -> clean, easy-to-understand, growth, reusable, how to organize files, how to name classes, how to structure html
- web performance -> less http requests, less code, compress code, use a css preprocessor, less images, compress images
*/

/*
PRIORITY IN CSS

IMPORTANCE > SPECIFICITY > SOURCE ORDER

IMPORTANCE
1.User(CSS changes from browser) !important declarations
2.Author(from CSS files) !important declarations
3.Author declarations
4.User declarations
5.Default browser declarations

SPECIFICITY
1.Inline styles
2.IDs
3.Classes, pseudo-classes, attribute
4.Elements, pseudo-elements

SOURCE ORDER
The last declaration in the code will override all other declarations and be applied.

!important should be used as a last resort.
* (universal selector) has no specificity (0, 0, 0, 0).
*/

/*
Units
percentage(%) [fonts] -> x% * parent's computed font-size
percentage(%) [lengths] ->  -> x% * parent's computed width
em(fonts) -> x * parent computed font-size
em(lengths) -> x * current element computed font-size
rem(fonts/lengths) -> x * root computecd font-size
vh -> x * 1% of viewport height
vw -> x * 1% of viewport width

Each property has an initial values, used if nothing is declared(and if there is no inherintace).
*/

/*
line-height is inherited, the computed value is the one that is being inherited, so if we have a relative value or a percentage, the value will be first computed in the parent element
and then inherited by the child element.
Property related to text are inherited: font-familiy, font-size, color, etc;(you cand search which on the internet).
The inherit keyword forces inherintance on a certain property.
The initial keyword resets a property to its initial value.
*/

/*
The think - build - architect mindset
Think about the layout of your webpage or web app before writing code.
Build you layout in HTML and CSS with a consistent structure for naming classes.
Create a logical architecture for your CSS with files and folders.

Think
Component-driven design:
- modular building blocks that make up interfaces;
- held together by the layout of the page;
- re-usable across a project, and between different projects;
- independent allowing us to use them anywhere on the page.

Build
BEM - Block Element Modifier
Ex: .block, .block__element, .block__element--modifier
Block: standalone component that is meaningful on its own.
Element: part of a block that has no standalone meaning.
Modifier: a different version of a block or an element(similar to a flag).

Architect
7-1 Pattern
7 different folder for partial Sass files ,and 1 main Sass file to import
all other files into a compiled css stylesheet.
The 7 folders:
- base;
- components;
- layout;
- pages;
- themes;
- abstracts;
- vendors.

Fluid layouts
- Allow webpage to adapt to the curent viewport widht or height
- Use %(vh or vw) instead of px for elements that should adapt to viewport(usally layout)
- Use max-width instead of width
Responsive units
- Use rem intead of px
Flexible images
- Use % for dimensions, together with max-width property
Media queries
- To change CSS styles on certain viewport widths(called breakpoints)

Layout types
- Float layouts(old way)
- Flexbox(modern way of layoing ot elements in a 1-dimensional row, perfect for component layouts)
- CSS Grid(for 2-dimensional grid, perfect for page layouts and complex components)
*/

/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485
*/
